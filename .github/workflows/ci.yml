name: Build/test
on:
  push:
    branches:
      - "main"
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - 'main'
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-2019]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up the repo
        uses: tree-sitter/setup-action/cli@v1
        with:
          install-lib: false
      - run: tree-sitter generate
      - name: Run tests
        uses: tree-sitter/parser-test-action@v2
        with:
          test-rust: true
          test-node: true
          test-python: true
          # test-go: true
          # test-swift: true
      - run: scripts/test-keywords.sh
  validate_tests:
    runs-on: ["ubuntu-latest"]
    strategy:
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - run: |
          STATUS=0
          if [[ $(grep -rn --exclude=errors.txt ERROR test/ | wc -l) -gt 0 ]]; then
              echo "Found 'ERROR' in tests: "
              grep -rn --exclude=errors.txt ERROR test/ | cut -f1,2 -d:
              STATUS=1
          fi
          if [[ $(grep -rn --exclude=errors.txt MISSING test/ | wc -l) -gt 0 ]]; then
              echo "Found 'MISSING' in tests: "
              grep -rn --exclude=errors.txt MISSING test/ | cut -f1,2 -d:
              STATUS=1
          fi
          if [[ $(grep -rn --exclude=errors.txt UNEXPECTED test/ | wc -l) -gt 0 ]]; then
              echo "Found 'UNEXPECTED' in tests: "
              grep -rn --exclude=errors.txt UNEXPECTED test/ | cut -f1,2 -d:
              STATUS=1
          fi
          exit $STATUS
