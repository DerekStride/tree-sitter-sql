================================================================================
Simple insert
================================================================================

INSERT INTO my_table
VALUES('foo','bar', 3);

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_into)
      (object_reference
        name: (identifier))
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal)))))

================================================================================
Simple insert with alias
================================================================================

INSERT INTO my_table AS x
VALUES('foo','bar', 3);

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_into)
      (object_reference
        name: (identifier))
      (keyword_as)
      alias: (identifier)
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal)))))

================================================================================
Simple insert with column ordering
================================================================================

REPLACE INTO my_table (name, id, year)
VALUES ('foo', 123, '2020');

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_replace)
      (keyword_into)
      (object_reference
        name: (identifier))
      (list
        (column
          (identifier))
        (column
          (identifier))
        (column
          (identifier)))
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal)))))

================================================================================
Insert-select
================================================================================

INSERT INTO my_table (a, b, c)
SELECT a, b, c
FROM my_other_table;

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_into)
      (object_reference
        name: (identifier))
      (list
        (column
          (identifier))
        (column
          (identifier))
        (column
          (identifier)))
      (select
        (keyword_select)
        (select_expression
          (term
            value: (field
              name: (identifier)))
          (term
            value: (field
              name: (identifier)))
          (term
            value: (field
              name: (identifier)))))
      (from
        (keyword_from)
        (relation
          (object_reference
            name: (identifier)))))))

================================================================================
Insert returning
================================================================================

INSERT INTO my_table
VALUES('foo','bar', 3)
RETURNING *;

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_into)
      (object_reference
        name: (identifier))
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal)))
    (returning
      (keyword_returning)
      (select_expression
        (term value: (all_fields))))))

================================================================================
Insert returning single column
================================================================================

INSERT INTO my_table
VALUES('foo','bar', 3)
RETURNING id;

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_into)
      (object_reference
        name: (identifier))
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal)))
    (returning
      (keyword_returning)
      (select_expression
        (term
          value: (field
            name: (identifier)))))))

================================================================================
Insert returning multiple defined columns
================================================================================

INSERT INTO my_table
VALUES('foo','bar', 3)
RETURNING id, val1, val2;

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_into)
      (object_reference
        name: (identifier))
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal)))
    (returning
      (keyword_returning)
      (select_expression
        (term
          value: (field
            name: (identifier)))
        (term
          value: (field
            name: (identifier)))
        (term
          value: (field
            name: (identifier)))))))

================================================================================
Insert with multple values
================================================================================

INSERT INTO some_table
  (field)
VALUES
  ("String value"),
  ("String value");

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_into)
      (object_reference
        (identifier))
      (list
        (column
          (identifier)))
      (keyword_values)
      (list
        (literal))
      (list
        (literal)))))

================================================================================
Insert with field name
================================================================================

INSERT INTO some_table
  SET field = "String does not get highlight in INSERT SET syntax";

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_into)
      (object_reference
        name: (identifier))
      (keyword_set)
      (assignment
        left: (field
          name: (identifier))
        right: (literal)))))

================================================================================
Simple insert with on conflict do nothing
================================================================================

INSERT INTO my_table
VALUES('foo','bar', 3)
ON CONFLICT DO NOTHING;

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_into)
      (object_reference
        name: (identifier))
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal))
      (keyword_on)
      (keyword_conflict)
      (keyword_do)
      (keyword_nothing))))

================================================================================
Simple insert with on conflict do update
================================================================================

INSERT INTO my_table
VALUES('foo','bar', 3)
ON CONFLICT DO UPDATE SET dname = EXCLUDED.dname;

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_into)
      (object_reference
        name: (identifier))
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal))
      (keyword_on)
      (keyword_conflict)
      (keyword_do)
      (keyword_update)
      (keyword_set)
      (assignment
        left: (field
          name: (identifier))
        right: (field
          (object_reference
            name: (identifier))
          name: (identifier))))))

================================================================================
Simple insert with low priority
================================================================================

INSERT LOW_PRIORITY my_table
VALUES('foo','bar', 3);

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_low_priority)
      (object_reference
        name: (identifier))
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal)))))

================================================================================
Simple insert with delayed
================================================================================

INSERT DELAYED my_table
VALUES('foo','bar', 3);

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_delayed)
      (object_reference
        name: (identifier))
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal)))))

================================================================================
Simple insert with high priority
================================================================================

INSERT HIGH_PRIORITY my_table
VALUES('foo','bar', 3);

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_high_priority)
      (object_reference
        name: (identifier))
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal)))))

================================================================================
Simple insert with ignore
================================================================================

INSERT IGNORE my_table
VALUES('foo','bar', 3);

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_ignore)
      (object_reference
        name: (identifier))
      (keyword_values)
      (list
        (literal)
        (literal)
        (literal)))))

================================================================================
Insert overwrite
================================================================================

INSERT OVERWRITE tab1
SELECT
  col1,
  col2
FROM
(
  SELECT
    *
  FROM
    tab2
  WHERE
    key1 >= 'val'
) a1;

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_overwrite)
      (object_reference
        (identifier))
      (select
        (keyword_select)
        (select_expression
          (term
            (field
              (identifier)))
          (term
            (field
              (identifier)))))
      (from
        (keyword_from)
        (relation
          (subquery
            (select
              (keyword_select)
              (select_expression
                (term (all_fields))))
            (from
              (keyword_from)
              (relation
                (object_reference
                  (identifier)))
              (where
                (keyword_where)
                (binary_expression
                  (field
                    (identifier))
                  (literal)))))
          (identifier))))))

================================================================================
Insert overwrite with partition
================================================================================

INSERT OVERWRITE tab1
PARTITION (key1 = 'val1', key2 = 'val2')
SELECT
  col1,
  col2
FROM
(
  SELECT
    *
  FROM
    tab2
  WHERE
    key1 >= 'val'
) a1;

--------------------------------------------------------------------------------

(program
  (statement
    (insert
      (keyword_insert)
      (keyword_overwrite)
      (object_reference
        (identifier))
      (table_partition
        (keyword_partition)
        (identifier)
        (literal)
        (identifier)
        (literal))
      (select
        (keyword_select)
        (select_expression
          (term
            (field
              (identifier)))
          (term
            (field
              (identifier)))))
      (from
        (keyword_from)
        (relation
          (subquery
            (select
              (keyword_select)
              (select_expression
                (term (all_fields))))
            (from
              (keyword_from)
              (relation
                (object_reference
                  (identifier)))
              (where
                (keyword_where)
                (binary_expression
                  (field
                    (identifier))
                  (literal)))))
          (identifier))))))

================================================================================
Merge into delete
================================================================================

MERGE INTO accounts t
USING monthly_accounts_update s
    ON t.customer = s.customer
    WHEN MATCHED
        THEN DELETE

--------------------------------------------------------------------------------

(program
  (statement
    (keyword_merge)
    (keyword_into)
    (object_reference
      (identifier))
    (identifier)
    (keyword_using)
    (object_reference
      (identifier))
    (identifier)
    (keyword_on)
    (binary_expression
      (field
        (object_reference
          (identifier))
        (identifier))
      (field
        (object_reference
          (identifier))
        (identifier)))
    (when_clause
      (keyword_when)
      (keyword_matched)
      (keyword_then)
      (keyword_delete))))

================================================================================
Merge into upsert
================================================================================

MERGE INTO accounts t
USING monthly_accounts_update s
    ON (t.customer = s.customer)
    WHEN MATCHED
        THEN UPDATE SET purchases = s.purchases + t.purchases
    WHEN NOT MATCHED
        THEN INSERT (customer, purchases, address)
              VALUES(s.customer, s.purchases, s.address)

--------------------------------------------------------------------------------

(program
  (statement
    (keyword_merge)
    (keyword_into)
    (object_reference
      (identifier))
    (identifier)
    (keyword_using)
    (object_reference
      (identifier))
    (identifier)
    (keyword_on)
    (binary_expression
      (field
        (object_reference
          (identifier))
        (identifier))
      (field
        (object_reference
          (identifier))
        (identifier)))
    (when_clause
      (keyword_when)
      (keyword_matched)
      (keyword_then)
      (keyword_update)
      (keyword_set)
      (assignment
        (field
          (identifier))
        (binary_expression
          (field
            (object_reference
              (identifier))
            (identifier))
          (field
            (object_reference
              (identifier))
            (identifier)))))
    (when_clause
      (keyword_when)
      (keyword_not)
      (keyword_matched)
      (keyword_then)
      (keyword_insert)
      (list
        (column
          (identifier))
        (column
          (identifier))
        (column
          (identifier)))
      (keyword_values)
      (list
        (field
          (object_reference
            (identifier))
          (identifier))
        (field
          (object_reference
            (identifier))
          (identifier))
        (field
          (object_reference
            (identifier))
          (identifier))))))

================================================================================
Merge into conditional upsert
================================================================================

MERGE INTO accounts t
USING monthly_accounts_update s
    ON (t.customer = s.customer)
    WHEN MATCHED AND s.address = 'Centreville'
        THEN DELETE
    WHEN MATCHED
        THEN UPDATE
            SET purchases = s.purchases + t.purchases, address = s.address
    WHEN NOT MATCHED
        THEN INSERT (customer, purchases, address)
              VALUES(s.customer, s.purchases, s.address)

--------------------------------------------------------------------------------

(program
  (statement
    (keyword_merge)
    (keyword_into)
    (object_reference
      (identifier))
    (identifier)
    (keyword_using)
    (object_reference
      (identifier))
    (identifier)
    (keyword_on)
    (binary_expression
      (field
        (object_reference
          (identifier))
        (identifier))
      (field
        (object_reference
          (identifier))
        (identifier)))
    (when_clause
      (keyword_when)
      (keyword_matched)
      (keyword_and)
      (binary_expression
        (field
          (object_reference
            (identifier))
          (identifier))
        (literal))
      (keyword_then)
      (keyword_delete))
    (when_clause
      (keyword_when)
      (keyword_matched)
      (keyword_then)
      (keyword_update)
      (keyword_set)
      (assignment
        (field
          (identifier))
        (binary_expression
          (field
            (object_reference
              (identifier))
            (identifier))
          (field
            (object_reference
              (identifier))
            (identifier))))
      (assignment
        (field
          (identifier))
        (field
          (object_reference
            (identifier))
          (identifier))))
    (when_clause
      (keyword_when)
      (keyword_not)
      (keyword_matched)
      (keyword_then)
      (keyword_insert)
      (list
        (column
          (identifier))
        (column
          (identifier))
        (column
          (identifier)))
      (keyword_values)
      (list
        (field
          (object_reference
            (identifier))
          (identifier))
        (field
          (object_reference
            (identifier))
          (identifier))
        (field
          (object_reference
            (identifier))
          (identifier))))))
