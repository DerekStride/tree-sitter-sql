================================================================================
Functions
================================================================================

SELECT MAX(id)
FROM my_table;
--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (invocation
            name: (identifier)
            parameter: (field
              name: (identifier))))))
    (from
      (keyword_from)
      (relation
        (table_reference
          name: (identifier))))))

================================================================================
No-arg functions
================================================================================

SELECT now();
--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (invocation
            name: (identifier)))))))

================================================================================
More complex function arguments
================================================================================

SELECT
  user_id,
  user_defined_func(user_id, 123, other_func(user_id, 321), user_id + 1 > 5) as something,
  regexp_replace(t.username, '^(.)[^@]+', '\1--', 'g') as username,
  created_at
FROM my_table AS t;
--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (field
            name: (identifier)))
        (term
          value: (invocation
            name: (identifier)
            parameter: (field
              name: (identifier))
            parameter: (literal)
            parameter: (invocation
              name: (identifier)
              parameter: (field
                name: (identifier))
              parameter: (literal))
            parameter: (binary_expression
              left: (binary_expression
                left: (field
                  name: (identifier))
                right: (literal))
              right: (literal)))
          (keyword_as)
          alias: (identifier))
        (term
          value: (invocation
            name: (identifier)
            parameter: (field
              table_alias: (identifier)
              name: (identifier))
            parameter: (literal)
            parameter: (literal)
            parameter: (literal))
          (keyword_as)
          alias: (identifier))
        (term
          value: (field
            name: (identifier)))))
    (from
      (keyword_from)
      (relation
        (table_reference
          name: (identifier))
        (keyword_as)
        table_alias: (identifier)))))

================================================================================
Casts and arrays
================================================================================

select col_has_check(
  'one'::name,
  'two'::name,
  array['three'::name, 'four'::name],
  'description'
);

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (invocation
            name: (identifier)
            parameter: (cast
              (literal)
              (keyword_name))
            parameter: (cast
              (literal)
              (keyword_name))
            parameter: (array
              (keyword_array)
              (cast
                (literal)
                (keyword_name))
              (cast
                (literal)
                (keyword_name)))
            parameter: (literal)))))))

================================================================================
Count with postgres style aggregate expression
================================================================================

SELECT COUNT(DISTINCT uid ORDER BY uid)
FROM table_a;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (count
            name: (keyword_count)
            (keyword_distinct)
            parameter: (field
              name: (identifier))
            (order_by
              (keyword_order)
              (keyword_by)
              (order_target
                (field
                  name: (identifier))))))))
    (from
      (keyword_from)
      (relation
        (table_reference
          name: (identifier))))))

================================================================================
GROUP CONCAT
================================================================================

SELECT GROUP_CONCAT(uid SEPARATOR ",")
FROM some_table
GROUP BY some_field;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          (group_concat
            (keyword_group_concat)
            (field
              (identifier))
            (keyword_separator)
            (literal)))))
    (from
      (keyword_from)
      (relation
        (table_reference
          (identifier)))
      (group_by
        (keyword_group)
        (keyword_by)
        (field
          (identifier))))))

================================================================================
GROUP CONCAT with all optional fields
================================================================================

SELECT GROUP_CONCAT(DISTINCT uid ORDER BY uid DESC SEPARATOR ",")
FROM some_table
GROUP BY some_field;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          (group_concat
            (keyword_group_concat)
            (keyword_distinct)
            (field
              (identifier))
            (order_by
              (keyword_order)
              (keyword_by)
              (order_target
                (field
                  (identifier))
                (direction
                  (keyword_desc))))
            (keyword_separator)
            (literal)))))
    (from
      (keyword_from)
      (relation
        (table_reference
          (identifier)))
      (group_by
        (keyword_group)
        (keyword_by)
        (field
          (identifier))))))

================================================================================
Unary ANY, ALL, SOME
================================================================================

SELECT *
FROM foo
WHERE id = ANY (
  SELECT 1
)

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (all_fields)))
    (from
      (keyword_from)
      (relation
        (table_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (field
            name: (identifier))
          right: (unary_expression
            operator: (keyword_any)
            operand: (subquery
              (select
                (keyword_select)
                (select_expression
                  (term
                    value: (literal)))))))))))

================================================================================
In with subquery
================================================================================

SELECT *
FROM foo
WHERE id IN (
  SELECT 1
  FROM bar;
)

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (all_fields)))
    (from
      (keyword_from)
      (relation
        (table_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (field
            name: (identifier))
          operator: (keyword_in)
          right: (subquery
            (select
              (keyword_select)
              (select_expression
                (term
                  value: (literal))))
            (from
              (keyword_from)
              (relation
                (table_reference
                  name: (identifier))))))))))

================================================================================
exists & not exists
================================================================================

SELECT *
FROM foo
WHERE (
  NOT EXISTS (
    SELECT 1
    FROM bar
    WHERE 0;
  ) OR EXISTS (
    SELECT 1
    FROM baz
    WHERE 1;
  )
)

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (all_fields)))
    (from
      (keyword_from)
      (relation
        (table_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (unary_expression
            operator: (keyword_not)
            operand: (exists
              (keyword_exists)
              (subquery
                (select
                  (keyword_select)
                  (select_expression
                    (term
                      value: (literal))))
                (from
                  (keyword_from)
                  (relation
                    (table_reference
                      name: (identifier)))
                  (where
                    (keyword_where)
                    predicate: (literal))))))
          operator: (keyword_or)
          right: (exists
            (keyword_exists)
            (subquery
              (select
                (keyword_select)
                (select_expression
                  (term
                    value: (literal))))
              (from
                (keyword_from)
                (relation
                  (table_reference
                    name: (identifier)))
                (where
                  (keyword_where)
                  predicate: (literal))))))))))

================================================================================
Basic SQL function creation
================================================================================

create or replace function public.fn()
 returns int
 language sql
return 1;

--------------------------------------------------------------------------------

(program
 (statement
  (create_function
   (keyword_create)
   (keyword_or)
   (keyword_replace)
   (keyword_function)
   (identifier)
   (identifier)
   (keyword_returns)
   (int (keyword_int))
   (function_language)
   (function_body
    (keyword_return)
    (literal)))))

================================================================================
With arguments
================================================================================

create or replace function public.fn(one int, two text)
 returns int
 language sql
return 1;

--------------------------------------------------------------------------------

(program
 (statement
  (create_function
   (keyword_create)
   (keyword_or)
   (keyword_replace)
   (keyword_function)
   (identifier)
   (identifier)
   (column_definitions
    (column_definition
     (identifier)
     (int
      (keyword_int)))
    (column_definition
     (identifier)
     (keyword_text)))
   (keyword_returns)
   (int (keyword_int))
   (function_language)
   (function_body
    (keyword_return)
    (literal)))))

================================================================================
Function details
================================================================================

create or replace function public.fn()
 returns int
 language sql
 immutable
 parallel safe
 strict
 cost 100
 rows 1
return 1;

--------------------------------------------------------------------------------

(program
 (statement
  (create_function
   (keyword_create)
   (keyword_or)
   (keyword_replace)
   (keyword_function)
   (identifier)
   (identifier)
   (keyword_returns)
   (int (keyword_int))
   (function_language)
   (function_volatility)
   (function_safety)
   (function_strictness)
   (function_cost)
   (function_rows)
   (function_body
    (keyword_return)
    (literal)))))

================================================================================
With `begin atomic`
================================================================================

create or replace function public.fn()
 returns int
 language sql
begin atomic
  return 1;
end;

--------------------------------------------------------------------------------

(program
 (statement
  (create_function
   (keyword_create)
   (keyword_or)
   (keyword_replace)
   (keyword_function)
   (identifier)
   (identifier)
   (keyword_returns)
   (int (keyword_int))
   (function_language)
   (function_body
    (keyword_begin)
    (keyword_atomic)
    (keyword_return)
    (literal)
    (keyword_end)))))

================================================================================
Dollar quoting a simple PLPGSQL body
================================================================================

create or replace function public.fn()
 returns int
 language plpgsql
as $function$
begin
  return 1;
end;
$function$;

--------------------------------------------------------------------------------

(program
 (statement
  (create_function
   (keyword_create)
   (keyword_or)
   (keyword_replace)
   (keyword_function)
   (identifier)
   (identifier)
   (keyword_returns)
   (int (keyword_int))
   (function_language)
   (function_body
    (keyword_as)
    (dollar_quote)
    (keyword_begin)
    (keyword_return)
    (literal)
    (keyword_end)
    (dollar_quote)))))

================================================================================
Variable declarations
================================================================================

create or replace function public.fn()
 returns int
 language plpgsql
as $function$
declare
  one int;
  two text := (select 'hello');
  three text := 'world';
begin
  return 1;
end;
$function$;

--------------------------------------------------------------------------------

(program
 (statement
  (create_function
   (keyword_create)
   (keyword_or)
   (keyword_replace)
   (keyword_function)
   (identifier)
   (identifier)
   (keyword_returns)
   (int (keyword_int))
   (function_language)
   (function_body
    (keyword_as)
    (dollar_quote)
    (keyword_declare)
    (function_declaration
     (identifier)
     (int (keyword_int)))
    (function_declaration
     (identifier)
     (keyword_text)
     (statement
      (select
       (keyword_select)
       (select_expression
        (term
         (literal))))))
    (function_declaration
     (identifier)
     (keyword_text)
     (literal))
    (keyword_begin)
  (keyword_return)
  (literal)
  (keyword_end)
(dollar_quote)))))

================================================================================
More complex function body
================================================================================

create or replace function public.do_stuff()
 returns trigger
 language plpgsql
as $function$
begin

  -- comment!
  with knn as (
    select
      h.alpha,
      -- TODO factor in distance
      avg(e.beta) as e_beta
    from htable h
    cross join lateral (
      select
        id,
        gamma,
        delta,
        centroid
      from ftable
      limit 3
    ) as e
    group by h.alpha
  )
  update htable set epsilon = epsilon + e_beta
  from knn
  where knn.alpha = htable.alpha;

  return new;

end;
$function$

--------------------------------------------------------------------------------

(program
 (statement
  (create_function
   (keyword_create)
   (keyword_or)
   (keyword_replace)
   (keyword_function)
   (identifier)
   (identifier)
   (keyword_returns)
   (keyword_trigger)
   (function_language)
   (function_body
    (keyword_as)
    (dollar_quote)
    (keyword_begin)
    (comment)
    (statement
     (keyword_with)
     (cte
      (identifier)
      (keyword_as)
      (statement
       (select
        (keyword_select)
        (select_expression
         (term
          (field
           (identifier)
           (identifier)))
         (comment)
         (term
          (invocation
           (identifier)
           (field
            (identifier)
            (identifier)))
          (keyword_as)
          (identifier))))
       (from
        (keyword_from)
        (relation
         (table_reference
          (identifier))
         (identifier))
        (lateral_cross_join
         (keyword_cross)
         (keyword_join)
         (keyword_lateral)
         (subquery
          (select
           (keyword_select)
           (select_expression
            (term
             (field
              (identifier)))
            (term
             (field
              (identifier)))
            (term
             (field
              (identifier)))
            (term
             (field
              (identifier)))))
          (from
           (keyword_from)
           (relation
            (table_reference
             (identifier)))
           (limit
            (keyword_limit)
            (literal))))
  (keyword_as)
(identifier))
  (group_by
   (keyword_group)
   (keyword_by)
   (field
    (identifier)
    (identifier))))))
  (update
   (keyword_update)
   (relation
    (table_reference
     (identifier)))
   (keyword_set)
   (assignment
    (field
     (identifier))
    (binary_expression
     (field
      (identifier))
     (field
      (identifier))))
   (from
    (keyword_from)
    (relation
     (table_reference
      (identifier)))
    (where
     (keyword_where)
     (binary_expression
      (field
       (identifier)
       (identifier))
      (field
       (identifier)
       (identifier)))))))
(keyword_return)
  (field
   (identifier))
  (keyword_end)
(dollar_quote)))))
